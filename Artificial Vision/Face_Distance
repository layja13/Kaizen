import cv2
import mediapipe as mp
import numpy as np
import serial

# Inicializar MediaPipe FaceMesh
mp_dibujo = mp.solutions.drawing_utils
mp_cara = mp.solutions.face_mesh

# Asignar el modelo a la variable face_mesh
objeto_cara = mp_cara.FaceMesh(static_image_mode = False,
                               max_num_faces = 1,
                               min_detection_confidence = 0.5)

# Inicializar la c치mara
cap = cv2.VideoCapture(0)

try:
    puerto = serial.Serial("COM8", 9600, timeout=1)
except:
    print("No se conecto!!!")

ventana1 = "Facemesh"
cv2.namedWindow(ventana1, cv2.WINDOW_NORMAL)
cv2.resizeWindow(ventana1, 720, 420)

while True:
    ret, frame = cap.read()  # Capturar un fotograma
    #frame = cv2.flip(frame, -1)
    # Convertir a formato RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Obtener resultados de la detecci칩n de facemesh
    resultados = objeto_cara.process(rgb_frame)

    # Verificar si se detectaron rostros
    if resultados.multi_face_landmarks:
        for puntos in resultados.multi_face_landmarks:

            #Dibujar los landmarks en la cara                        TESSELATION
            #mp_dibujo.draw_landmarks(frame, puntos, mp_cara.FACEMESH_CONTOURS)

            nariz = puntos.landmark[4]
            frente = puntos.landmark[10]
            barbilla = puntos.landmark[152]

            alto, ancho, _ = frame.shape

            coorNarizX, coorNarizY = int(nariz.x * ancho), int(nariz.y * alto)
            coorFrenteX, coorFrenteY = int(frente.x * ancho), int(frente.y * alto)
            coorBarbillaX, coorBarbillaY = int(barbilla.x * ancho), int(barbilla.y * alto)

            p1 = np.array([coorFrenteX, coorFrenteY])
            p2 = np.array([coorBarbillaX, coorBarbillaY])

            punto_barbilla_derecha = np.array([coorBarbillaX+100, coorBarbillaY])
            punto_barbilla_izquierda = np.array([coorBarbillaX-100, coorBarbillaY])

            punto_arriba = np.array([coorNarizX, coorNarizY-100])
            punto_abajo = np.array([coorNarizX, coorNarizY+100])

            punto3 = np.array([300, 300])
            punto4 = np.array([600, 300])
            
            vector2 = np.linalg.norm(punto3 - punto4)

            #crear vector
            l1 = np.linalg.norm(p1 - p2)

            # distancia cara a camara 30 , vector 380
            distancia_actual = (380/l1) * 30
            distancia_actual = round(distancia_actual, 2)

            try:
                puerto.write(f"{coorNarizX}A{coorNarizY}B{distancia_actual}\n".encode())
            except:
                print("No se envio la informaci칩n ")

            print(distancia_actual)


    # Mostrar el fotograma
    cv2.imshow(ventana1, frame)

    # Salir del bucle si se presiona la tecla 'q'
    salir = cv2.waitKey(1)
    if salir == 27:
        break

# Liberar la c치mara y cerrar las ventanas
cap.release()
cv2.destroyAllWindows()
